<resources>
    <string name="app_name">Login</string>
    <string name="error_name">Name cannot empty</string>
    <string name="error_phone">Phone cannot empty</string>
    <string name="error_email">Sample email : myemail@gmail.com</string>

    <string name="user_name">U s e r    N a m e"</string>
    <string name="password">P a s s w o r d"</string>
    <string name="fullname">Full Name"</string>
    <string name="phone">Phone Number</string>
    <string name="email">Email</string>
    <string name="submit">S U B M I T</string>
    <string name="login">L O G I N</string>
    <string name="symbol1">:</string>
    <string name="user_valid">ADMIN</string>
    <string name="pass_valid">PASSWORD</string>
    <string name="error_not_valid_account">Username or password is not valid</string>

    <string name="prefer_name">prefdata</string>

    <string name="char_input">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .</string>

    <string name="tag_name">name</string>
    <string name="tag_phone">phone</string>
    <string name="tag_email">email</string>
    <string name="title_activity_nav">NavActivity</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="action_settings">Settings</string>

    <string name="sample_long_text">The Presenter is not a OnClickListener. The View is responsible for handling user input and invoking the corresponding method of the presenter. Why not eliminating this “forwarding” process by making the Presenter an OnClickListener? If doing so the presenter needs to have knowledge about views internals. For instance, if a View has two buttons and the view registers the Presenter as OnClickListener on both, how could the Presenter distinguish which button has been clicked on a click event (without knowing views internals like the references to the button)? Model, View and Presenter should be decoupled. Furthermore, by letting Presenter implement OnClickListener the Presenter is bound to the android platform. In theory the presenter and business logic could be plain old java code, which could be shared with a desktop application or any other java application.
    The View is only doing what the Presenter tells the View to do like you can see in step 1 and step 2: After the user has clicked on the “load user button” (step 1) the view doesn’t show the loading animation directly. It’s the presenter (step 2) who explicitly tells the view to show the loading animation. This variant of Model-View-Presenter is called MVP Passive View. The view should be as dumb as possible. Let the presenter control the view in an abstract way. For instance: presenter invokes view.showLoading() but presenter should not control view specific things like animations. So presenter should not invoke methods like view.startAnimation() etc.
    By implementing MVP Passive View it’s much easier to handle concurrency and multithreading. Like you can see in step 3 the database query runs async an the presenter is a Listener / Observer and gets notified when data is ready to display.
    It seems that Activities and especially Fragments are good candidates. Usually a Fragment is responsible to just display a single content like a ListView. For example InboxView, controlled by an InboxPresenter which uses MailProvider to get a List of Mails. However, MVP is not limited to Fragments or Activities. You can also apply this design Pattern on ViewGroups like shown in SearchView. In the most of my apps I use Fragments as MVP candidates. However it’s up to you to find MVP candidates. Just ensure that the view is independent so that one presenter can control that View without getting in conflict with another Presenter.</string>
</resources>
